#!/usr/bin/env torch-qlua
----------------------------------------------------------------------
--
-- Copyright (c) 2012 Clement Farabet
-- 
-- Permission is hereby granted, free of charge, to any person obtaining
-- a copy of this software and associated documentation files (the
-- "Software"), to deal in the Software without restriction, including
-- without limitation the rights to use, copy, modify, merge, publish,
-- distribute, sublicense, and/or sell copies of the Software, and to
-- permit persons to whom the Software is furnished to do so, subject to
-- the following conditions:
-- 
-- The above copyright notice and this permission notice shall be
-- included in all copies or substantial portions of the Software.
-- 
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-- EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-- NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-- LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-- OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-- WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-- 
----------------------------------------------------------------------
-- description:
--     thkernel - This is a super minimal Torch interpreter.
--                It's useful as a kernel, as it doesn't clutter the
--                stdout.
----------------------------------------------------------------------

_kernel_ = true

require 'torch'
require 'nn'
require 'torch-env'

import 'torch'
import 'image'
import 'gnuplot'
import 'paths'
import 'fs'
import('webterm',true)

print '[kernel started]'

function traceback (message)
   local tp = type(message)
   if tp ~= "string" and tp ~= "number" then return message end
   local debug = _G.debug
   if type(debug) ~= "table" then return message end
   local tb = debug.traceback
   if type(tb) ~= "function" then return message end
   return tb(message, 2)
end

local iowrite = io.write
io.write = function(w)
   iowrite(w)
   io.flush()
end

local events = {}
function addevent(f)
   table.insert(events,f)
end
function runevents()
   -- copy events (protect)
   local cevents = {}
   for i,event in ipairs(events) do
      table.insert(cevents,event)
   end
   -- flush global event list:
   events = {}
   -- process all events
   for i,event in ipairs(cevents) do
      -- process event:
      local done = event()
      -- if event not completed, re-schedule:
      if not done then table.insert(events, event) end
   end
end
function clearevents()
   -- clear all events
   events = {}
end

while true do
   runevents()
   io.flush()
   local line = io.read('*line')
   if line then
      if line:find('^=') then
         line = 'print(' .. line:gsub('^=','') .. ')'
      elseif line:find('^?') then
         line = 'help(' .. line:gsub('^?','') .. ')'
      end
      local ok,err = pcall(loadstring(line))
      if not ok then
         if err == 'attempt to call a nil value' then
            local ok,err = xpcall(loadstring('print(' .. line .. ')'), traceback)
            if not ok then
               print(err)
            end
         else
            print(err)
         end
      end
   end
   collectgarbage()
end
